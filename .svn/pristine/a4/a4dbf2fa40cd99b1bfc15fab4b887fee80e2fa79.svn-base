using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CSharpClientApplication
{
    public partial class FormMain : Form
    {
        public static Client client = null;

        public static String ipAddressServer = "127.0.0.1";
        public static int port = 8001;

        private List<FormChatRoom> listFormChatRoom;

        private Thread t;

        public FormMain()
        {
            InitializeComponent();

            menuStrip_Update();

            initTreeViewChatRooms();
            initTreeViewClients();

            listFormChatRoom = new List<FormChatRoom>();

            t = new Thread(new ThreadStart(receiveMessageFromServer));
            t.IsBackground = true;
        }

        public void receiveMessageFromServer()
        {
            byte[] buf = new byte[ChatLib.ChatLib.MESSAGE_MAX_SIZE];
            while (true)
            {
                int nbBytes = client.ClientSocket.Receive(buf);

                System.Diagnostics.Debug.WriteLine("FormMain received");

                if (nbBytes > 0)
                {
                    try
                    {
                        ChatLib.MessageChat msg = ChatLib.ChatLib.createMessageFromString(ChatLib.ChatLib.GetString(buf, nbBytes));
                        System.Diagnostics.Debug.WriteLine(msg.MessageType);

                        switch (msg.MessageType)
                        {
                            case ChatLib.MessageType.ChatRoomExit:
                                if (msg.ContentMessage == "true")
                                {
                                    this.Invoke((MethodInvoker)delegate
                                    {
                                        listFormChatRoom.Remove(listFormChatRoom.Find(x => x.ChatRoomName == msg.TargetName));
                                    });
                                }
                                break;

                            case ChatLib.MessageType.ChatRoomJoin:
                                if (msg.ContentMessage == "true")
                                {
                                    this.Invoke((MethodInvoker)delegate
                                    {
                                        if (!listFormChatRoom.Exists(x => x.ChatRoomName == msg.TargetName))
                                        {
                                            listFormChatRoom.Add(new FormChatRoom(msg.TargetName));
                                        }

                                        listFormChatRoom.Find(x => x.ChatRoomName == msg.TargetName).Show();
                                    });
                                }
                                break;

                            case ChatLib.MessageType.PrivateChatCreate:
                                if (msg.ContentMessage == "true")
                                {
                                    this.Invoke((MethodInvoker)delegate
                                    {
                                        FormChatPrivate formChatPrivate = new FormChatPrivate(msg.TargetName);
                                        formChatPrivate.Show();
                                    });
                                }

                                break;

                            case ChatLib.MessageType.ChatRoomCreate:
                                if (msg.ContentMessage == "true")
                                {
                                    this.Invoke((MethodInvoker)delegate
                                    {
                                        this.formNewRoom_OnCreateNewChatRoom(msg.TargetName);
                                    });
                                }

                                break;

                            case ChatLib.MessageType.ClientChatRoomMessage:
                                // Checker parmis toutes les chat room ouvert dans lesquels le client est co
                                // Forward le message à cette chat room
                                if (listFormChatRoom.Exists(x => x.ChatRoomName == msg.TargetName))
                                {
                                    this.Invoke((MethodInvoker)delegate
                                    {
                                        FormChatRoom chat = listFormChatRoom.Find(x => x.ChatRoomName == msg.TargetName);
                                        chat.OnReceivedMessage(msg);
                                    });
                                }

                                break;

                            case ChatLib.MessageType.UpdateConnectedUsersInChatRoom:

                                if (listFormChatRoom.Exists(x => x.ChatRoomName == msg.TargetName))
                                {
                                    this.Invoke((MethodInvoker)delegate
                                    {
                                        FormChatRoom chat = listFormChatRoom.Find(x => x.ChatRoomName == msg.TargetName);
                                        chat.UpdateConnectedUsersInChatRoom(msg);
                                    });
                                }
                                
                                break;

                            case ChatLib.MessageType.ClientPrivateMessage:

                                // METTRE DU PRIVATE ICI !

                                //if (listFormChatRoom.Exists(x => x.ChatRoomName == msg.TargetName))
                                //{
                                //    this.Invoke((MethodInvoker)delegate
                                //    {
                                //        FormChatRoom chat = listFormChatRoom.Find(x => x.ChatRoomName == msg.TargetName);
                                //        chat.UpdateConnectedUsersInChatRoom(msg);
                                //    });
                                //}
                                break;
                        }
                    }
                    catch (JsonReaderException)
                    {
                    }
                }
            }
        }

        public void initTreeViewChatRooms()
        {
            this.treeViewChatRooms.NodeMouseDoubleClick += treeViewChatRooms_NodeMouseDoubleClick;
        }

        public void initTreeViewClients()
        {
            this.treeViewClients.NodeMouseDoubleClick += treeViewClients_NodeMouseDoubleClick;
        }

        /***** GETTER *****/
        public bool Connected
        {
            get
            {
                if (FormMain.client != null)
                {
                    return true;
                }
                else return false;
            }
        }
        /******************/

        /***** TREE VIEW *****/
        private void treeViewChatRooms_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            TreeNode treeNode = (TreeNode)e.Node;

            // Si c'est un chat room
            if (treeNode.Level == 1)
            {
                MessageBox.Show("Ceci est un Chat Room");
                ChatLib.MessageChat msg = new ChatLib.MessageChat(ChatLib.MessageType.ChatRoomJoin, client.UserName, null, treeNode.Text);
                ChatLib.ChatLib.SendMessage(client.ClientSocket, msg);
            }
            // Sinon si c'est un client
            else if (treeNode.Level == 2)
            {
                MessageBox.Show("Ceci est un Client");
                ChatLib.MessageChat msg = new ChatLib.MessageChat(ChatLib.MessageType.PrivateChatCreate, client.UserName, null, treeNode.Text);
                ChatLib.ChatLib.SendMessage(client.ClientSocket, msg);
            }
        }

        private void treeViewClients_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            TreeNode treeNode = (TreeNode)e.Node;

            // Si c'est un client
            if (treeNode.Level == 1)
            {
                MessageBox.Show("Ceci est un Client");
                ChatLib.MessageChat msg = new ChatLib.MessageChat(ChatLib.MessageType.PrivateChatCreate, client.UserName, treeNode.Text, null);
                ChatLib.ChatLib.SendMessage(client.ClientSocket, msg);
            }
        }

        private void createNewChatRoom(string chatRoomName)
        {
            TreeNode newTreeNode = new TreeNode(chatRoomName);

            this.treeViewChatRooms.Nodes[0].Nodes.Add(newTreeNode);
        }
        /******************/

        /***** MENU STRIP *****/
        private void quitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Environment.Exit(0);
        }

        private void connectToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!Connected)
            {
                if (FormMain.ipAddressServer != null || FormMain.port != -1)
                {
                    FormConnection formConnection = new FormConnection();
                    formConnection.OnCreateConnectingClient += formConnection_OnCreateConnectingClient;
                    formConnection.ShowDialog();
                }
                else
                {
                    MessageBox.Show("Please first configure the server.\nGo to Menu > Parameters > Server IP Address.");
                }
            }
            else
            {
                // On coupe toutes les connexions

                FormMain.client = null;
            }

            menuStrip_Update();
        }

        private void newChatRoomToolStripMenuItem_Click(object sender, EventArgs e)
        {
            FormNewRoom formNewRoom = new FormNewRoom();
            formNewRoom.ShowDialog();
        }

        /*********************/

        /***** DELEGATES *****/
        private void formConnection_OnCreateConnectingClient(Client client)
        {
            if (client != null)
            {
                FormMain.client = client;
                this.Text = FormMain.client.UserName + " - Chat";
                t.Start();
            }
            else
            {
                MessageBox.Show("Error while trying to connect...");
            }
        }

        private void formNewRoom_OnCreateNewChatRoom(string chatRoomName)
        {
            if (chatRoomName != null)
            {
                createNewChatRoom(chatRoomName);

                listFormChatRoom.Add(new FormChatRoom(chatRoomName));

                this.treeViewChatRooms.ExpandAll();
            }
        }

        private void formIPServer_OnConfiguringServer(string ip, int port)
        {
            FormMain.ipAddressServer = ip;
            FormMain.port = port;
        }
        /********************/

        /***** VUES *****/
        private void menuStrip_Update()
        {
            if (Connected)
            {
                ToolStripMenuItem menuItem = (ToolStripMenuItem)MainMenuStrip.Items[0];
                foreach (ToolStripItem item in menuItem.DropDownItems)
                {
                    if (item.Name == "connectToolStripMenuItem")
                    {
                        item.Text = "Disconnect...";
                    }
                    else if (item.Name == "newChatRoomToolStripMenuItem")
                    {
                        item.Visible = true;
                    }
                }
            }
            else
            {
                ToolStripMenuItem menuItem = (ToolStripMenuItem)MainMenuStrip.Items[0];
                foreach (ToolStripItem item in menuItem.DropDownItems)
                {
                    if (item.Name == "connectToolStripMenuItem")
                    {
                        item.Text = "Connect...";
                    }
                    else if (item.Name == "newChatRoomToolStripMenuItem")
                    {
                        item.Visible = false;
                    }
                }
            }
        }

        private void serverIPAddressToolStripMenuItem_Click(object sender, EventArgs e)
        {
            FormIPServer formIPServer = new FormIPServer(ipAddressServer, port);

            formIPServer.OnConfiguringServer += formIPServer_OnConfiguringServer;

            formIPServer.ShowDialog();
        }
        /****************/
    }
}
