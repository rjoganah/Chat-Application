using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net.Sockets;
using System.Net;
using ChatLib;
using System.Threading;

namespace CSharpServerApplication
{
    class Program
    {
        public static int port = 8001;

        public static List<ChatRoom> chatRoomList;
        public static Socket serverSocket;
        public enum typeOfMessage
        {
            ACK,
            MP,
            M,
            REQ

        };

        //Bind socket to server ip address and Listen to an available port
        public static Socket setServerSocket()
        {
            Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            int choix = 0;
            
            IPHostEntry ipHostEntry = Dns.GetHostEntry(Dns.GetHostName());
            
            //On prend uniquement une adresse IPV4 (Ne marche pas pour les IPV 6 car le serverSocket est initialisé en mode InterNetwork, pas en InterNetworkV6)
            IPAddress ipAddress = null;     
            foreach (IPAddress ipAdd in ipHostEntry.AddressList)
            {
                if (ipAdd.AddressFamily.Equals(AddressFamily.InterNetwork))
                {
                    ipAddress = ipAdd;
                }
            }

            IPEndPoint localEndPoint = null;
            do
            {
                Console.WriteLine("1. Local IP");
                Console.WriteLine("2. Automatic IP");
                Console.Write("Your choice : ");
                choix = int.Parse(Console.ReadLine());
                Console.Clear();
 
            } while (choix != 1 && choix !=2);
            switch (choix)
            {
                case 1:
                    ipAddress = IPAddress.Parse("127.0.0.1");
                    localEndPoint = new IPEndPoint(ipAddress, port);
                    
                    break;
                case 2: localEndPoint = new IPEndPoint(ipAddress, port);
                    break;
            }

            serverSocket.Bind(localEndPoint);

            serverSocket.Listen(50);

            System.Console.WriteLine("Listening to: " + ipAddress + ":" + port);

            return serverSocket;
        }

        public static void connectionEstablishment()
        {
            while (true)
            {
                Socket newSocket = null;

                newSocket = serverSocket.Accept();

                System.Console.WriteLine("Connection Accepted");
                

                if (newSocket != null)
                {
                    newSocket.Send(ChatLib.ChatLib.GetBytes("Connection established"));
                    Thread socketConnection = new Thread(new ParameterizedThreadStart(launchNewSocketConnection));
                    socketConnection.Start(newSocket);
                }                
            }
        }

        private static void launchNewSocketConnection(object obj)
        {
            Socket newSocket = (Socket)obj;
            Boolean connected = false;

            if (newSocket != null)
            {
                //attendre de recevoir le nom du chatRoom, le nom de l'utilisateur et son mot de passe
                byte[] chatRoomName = new byte[50];
                byte[] userName = new byte[50];
                byte[] userPassword = new byte[50];

                newSocket.Receive(chatRoomName);     
                newSocket.Receive(userName);
                newSocket.Receive(userPassword);

                String ChatRoomName = ChatLib.ChatLib.GetString(chatRoomName);
                String UserName = ChatLib.ChatLib.GetString(userName);
                String UserPassword = ChatLib.ChatLib.GetString(userPassword);

                //Si le chatRoom n'éxiste pas déjà
                if (chatRoomList.Exists(x => x.name == ChatRoomName))
                {
                    //on créé le chatRoom
                    chatRoomList.Add(new ChatRoom(ChatRoomName, new List<ConnectedUser>()));
                }

                //On prend le chatroom éxistant (ou nouvellement créé)
                ChatRoom theChatRoom = chatRoomList.Find(x => x.name == ChatRoomName);

                //Si l'utilisateur est déjà connecté au chatRoom            
                if (theChatRoom.connectedUsers.Exists(x => x.name == UserName))
                {
                    ConnectedUser theUser = theChatRoom.connectedUsers.Find(x => x.name == UserName);
                    
                    //vérifier son mot de passe
                    if(theUser.password.Equals(UserPassword))
                    {
                        connected = true;
                    }
                }
                else
                {
                    //Sinon on ajoute l'utilisateur au chatRoom
                    theChatRoom.connectedUsers.Add(new ConnectedUser(UserName, UserPassword));
                    connected = true;
                }

                while (connected)
                {
                    byte[] MessageReceived = new byte[50];
                    newSocket.Receive(MessageReceived);
                    typeOfMessage typeMsg;

                    switch (ChatLib.ChatLib.GetString(MessageReceived))
                    {
                        case "ACK": typeMsg = typeOfMessage.ACK;
                            break;
                        case "MP": typeMsg = typeOfMessage.MP;
                            break;
                        case "M": typeMsg = typeOfMessage.M;
                            break;
                        case "REQ": typeMsg = typeOfMessage.REQ;
                            break;
                    }

                    Console.WriteLine(ChatLib.ChatLib.GetString(MessageReceived));
                }
            }
        }

        static void Main(string[] args)
        {
            chatRoomList = new List<ChatRoom>();

            serverSocket = setServerSocket();
            
            Thread connection = new Thread(connectionEstablishment);

            connection.Start();
        }
    }
}
