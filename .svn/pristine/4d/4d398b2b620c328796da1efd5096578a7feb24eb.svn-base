using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net.Sockets;
using System.Net;
using ChatLib;
using System.Threading;

namespace CSharpServerApplication
{
    class Program
    {
        public static int port = 8001;
        public static IPAddress ipServer = null;

        public static List<User> userList;
        public static List<ChatRoom> chatRoomList;
        public static List<ConnectedUser> connectedUserList;
        public static Socket serverSocket;


        //Bind socket to server ip address and Listen to an available port
        public static Socket setServerSocket()
        {
            Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            int choix = 0;

            IPHostEntry ipHostEntry = Dns.GetHostEntry(Dns.GetHostName());

            //On prend uniquement une adresse IPV4 (Ne marche pas pour les IPV 6 car le serverSocket est initialisé en mode InterNetwork, pas en InterNetworkV6)
            IPAddress ipAddress = null;
            foreach (IPAddress ipAdd in ipHostEntry.AddressList)
            {
                if (ipAdd.AddressFamily.Equals(AddressFamily.InterNetwork))
                {
                    ipAddress = ipAdd;
                }
            }

            IPEndPoint localEndPoint = null;
            do
            {
                Console.WriteLine("1. Local IP");
                Console.WriteLine("2. Automatic IP");
                Console.Write("Your choice : ");
                choix = int.Parse(Console.ReadLine());
                Console.Clear();

            } while (choix != 1 && choix != 2);
            
            switch (choix)
            {
                case 1:
                    ipAddress = IPAddress.Parse("127.0.0.1");
                    localEndPoint = new IPEndPoint(ipAddress, port);

                    break;
                case 2: localEndPoint = new IPEndPoint(ipAddress, port);
                    break;
            }

            ipServer = ipAddress;

            serverSocket.Bind(localEndPoint);

            serverSocket.Listen(50);

            System.Console.WriteLine("Listening to: " + ipAddress + ":" + port);

            return serverSocket;
        }

        public static void connectionEstablishment()
        {
            while (true)
            {
                Socket newSocket = null;

                newSocket = serverSocket.Accept();

                System.Console.WriteLine("Connection Accepted");


                if (newSocket != null)
                {
                    newSocket.Send(ChatLib.ChatLib.GetBytes("Connection Established"));
                    Thread socketConnection = new Thread(new ParameterizedThreadStart(launchNewSocketConnection));
                    socketConnection.Start(newSocket);
                }
            }
        }

        private static void sendMessage(object obj)
        {
            object[] objects = obj as object[];
            ChatLib.ChatLib.SendMessage(objects[0] as Socket, objects[1] as MessageChat);
        }

        private static String splitChatRoomList(List<ChatRoom> list)
        {
            String splittedList = "";

            foreach (ChatRoom chatRoom in list)
            {
                splittedList += chatRoom.name + "\\";
            }

            return splittedList;
        }

        private static String splitConnectedUserList(List<ConnectedUser> list)
        {
            String splittedList = "";

            foreach (ConnectedUser user in list)
            {
                splittedList += user.name + "\\";
            }

            return splittedList;
        }

        
        private static void updateChatRoomList()
        {
            foreach (ConnectedUser user in connectedUserList)
            {
                //envoie de la liste de chatRoom
                ChatLib.MessageChat msgChatRoomList = new ChatLib.MessageChat(MessageType.UpdateChatRoomList, "server", user.name, splitChatRoomList(chatRoomList));
                Console.WriteLine("send updateChatRoom to : " + user.name +" " + user.userSocket.ToString());
                ChatLib.ChatLib.SendMessage(user.userSocket, msgChatRoomList);
                //envoie de la liste des utilisteurs connectés par chatRoom
            

                //envoie de la liste des utilisateurs connectés
                //ChatLib.MessageChat msgConnectedUserList = new ChatLib.MessageChat(MessageType.UpdateChatRoomList, "server", user.name, splitConnectedUserList(connectedUserList));
        }

        }

        private static void launchNewSocketConnection(object obj)
        {
            Socket newSocket = (Socket)obj;
            Thread socketThread;
            object[] objects;
            String chatRoomName;

            if (newSocket != null)
            {

                while (newSocket.Connected)

                {
                    byte[] MessageReceived = new byte[ChatLib.ChatLib.MESSAGE_MAX_SIZE];

                    // On attend de recevoir un msg provenant d'un client
                    int nbBytes = newSocket.Receive(MessageReceived);

                    // On recupere la requete envoye par un client
                    string msgFromClient = ChatLib.ChatLib.GetString(MessageReceived, nbBytes);
                    System.Diagnostics.Debug.WriteLine(msgFromClient);

                    // On caste la requete en message 
                    ChatLib.MessageChat msg = ChatLib.ChatLib.createMessageFromString(msgFromClient.Trim());
                    Console.WriteLine(msg.MessageType.ToString());

                    // Suivant le type de message 
                    switch (msg.MessageType)
                    {
                        case MessageType.None:
                            
                            break;

                        case MessageType.ClientPrivateMessage:

                            msg.TargetName = connectedUserList.Find(x => x.name == msg.TargetName).name;
                            
                            objects = new object[2] { connectedUserList.Find(x => x.name == msg.TargetName).userSocket, msg };

                            socketThread = new Thread(new ParameterizedThreadStart(sendMessage));
                            socketThread.Start(objects);


                            break;

                        // Message texte
                        case MessageType.ClientChatRoomMessage:

                            String targetChatRoom = msg.TargetName;

                            foreach (ConnectedUser user in connectedUserList)
                            {
                                if (user.chatRoomList.Exists(x => x.name == targetChatRoom))
                                {
                                    // A mettre lorsque c'est un message privé.
                                    // Dans ce cas on laisse le nom du chat room comme target
                                    //msg.TargetName = user.name;

                                    objects = new object[2] { user.userSocket, msg };

                                    socketThread = new Thread(new ParameterizedThreadStart(sendMessage));
                                    socketThread.Start(objects);
                                }
                            }
                            break;

                        // un client se log
                        case MessageType.ConnectToServer:
                            String userName = msg.SenderName;
                            String userPassword = msg.ContentMessage;


                            ChatLib.MessageChat msgLogIn = new ChatLib.MessageChat(MessageType.ConnectToServer, "server", msg.SenderName, "true");

                            if (userList.Exists(x => x.name == userName))
                            {
                                //vérifier son mot de passe
                                if (userList.Find(x => x.name == userName).password.Equals(userPassword))
                                {
                                    connectedUserList.Find(x => x.name == userName).userSocket.Disconnect(true);
                                    connectedUserList.Find(x => x.name == userName).userSocket = newSocket;

                                    if (msgLogIn != null)
                                    {
                                        ChatLib.ChatLib.SendMessage(newSocket, msgLogIn);
                                    }
                                }
                                else
                                {
                                    if (msgLogIn != null)
                                    {
                                        msgLogIn.ContentMessage = "false";
                                        ChatLib.ChatLib.SendMessage(newSocket, msgLogIn);
                                    }
                                        
                                    newSocket.Disconnect(true);
                                }
                            }
                            else
                            {
                                  //Sinon on ajoute l'utilisateur à la liste des utilisateurs connectés
                                  connectedUserList.Add(new ConnectedUser(userName, new List<ChatRoom>(), newSocket));
                                  userList.Add(new User(userName, userPassword));

                                  if (msgLogIn != null)
                                  {
                                      ChatLib.ChatLib.SendMessage(newSocket, msgLogIn);
                                  }
                            }

                            break;

                        // un client se déconnecte
                        case MessageType.DisconnectFromServer:
                           
                                connectedUserList.Remove(connectedUserList.Find(x => x.name == msg.SenderName));

                                ChatLib.MessageChat msgDisconnectOK = new ChatLib.MessageChat(MessageType.DisconnectFromServer, "server", msg.SenderName, "true");

                               if (msgDisconnectOK != null)
                               {
                                 ChatLib.ChatLib.SendMessage(newSocket, msgDisconnectOK);
                               }
                               
                               newSocket.Disconnect(true);
                            
                            break;

                        //un client rejoint la ChatRoom
                        case MessageType.ChatRoomJoin:
                            chatRoomName = msg.ContentMessage;

                            ChatLib.MessageChat msgJoinOK = new ChatLib.MessageChat(MessageType.ChatRoomJoin, msg.SenderName, chatRoomName, "true");

                            if (connectedUserList.Find(x => x.name == msg.SenderName).chatRoomList.Exists(x => x.name == chatRoomName))
                                msgJoinOK.ContentMessage = "false";
                            else
                            {
                                if (!connectedUserList.Find(x => x.name == msg.SenderName).chatRoomList.Exists(x => x.name == chatRoomName))
                                {
                                    connectedUserList.Find(x => x.name == msg.SenderName).chatRoomList.Add(new ChatRoom(chatRoomName));
                                    
                                }
                            }

                            Console.WriteLine(msgJoinOK.ContentMessage);
                            if (msgJoinOK != null)
                            {
                                
                                ChatLib.ChatLib.SendMessage(newSocket, msgJoinOK);
                            }  

                            break;

                        //un client quitte la chatRoom
                        case MessageType.ChatRoomExit:
                            chatRoomName = msg.ContentMessage;

                            connectedUserList.Find(x => x.name == msg.SenderName).chatRoomList.Remove(connectedUserList.Find(x => x.name == msg.SenderName).chatRoomList.Find(x => x.name == chatRoomName));

                            ChatLib.MessageChat msgExitOK = new ChatLib.MessageChat(MessageType.ChatRoomExit, msg.SenderName, chatRoomName, "true");

                            ChatLib.ChatLib.SendMessage(newSocket, msgExitOK);

                            break;

                        //supprimer un chatRoom
                        case MessageType.ChatRoomDelete:
                            chatRoomName = msg.ContentMessage;

                            foreach (ConnectedUser user in connectedUserList)
                            {
                                if (user.chatRoomList.Exists(x => x.name == chatRoomName))
                                {
                                    user.chatRoomList.Remove(user.chatRoomList.Find(x => x.name == chatRoomName));
                                }
                            }

                            chatRoomList.Remove(chatRoomList.Find(x => x.name == chatRoomName));

                            break;

                        // un client créé un chat room
                        case MessageType.ChatRoomCreate:
                             chatRoomName = msg.ContentMessage;

                            ChatLib.MessageChat msgCreateOK = new ChatLib.MessageChat(MessageType.ChatRoomCreate, msg.SenderName, chatRoomName, "true");

                            if (chatRoomList.Exists(x => x.name == chatRoomName))
                            {
                                if (msgCreateOK != null)
                                {
                                    msgCreateOK.ContentMessage = "false";        
                                }      
                            }
                            else
                            {
                                
                                    chatRoomList.Add(new ChatRoom(chatRoomName));
                                
                            }
                            
                            ChatLib.ChatLib.SendMessage(newSocket, msgCreateOK);
                            updateChatRoomList();
                            break;
                        case MessageType.UpdateConnectedUsers:
                            break;
                    }
                }
            }
        }

        static void Main(string[] args)
        {
            connectedUserList = new List<ConnectedUser>();
            chatRoomList = new List<ChatRoom>();
            userList = new List<User>();

            serverSocket = setServerSocket();

            Thread connection = new Thread(connectionEstablishment);

            connection.Start();
        }
    }
}
